/*
 * Copyright 2019 NXP
 * This software is owned or controlled by NXP and may only be used strictly
 * in accordance with the applicable license terms.  By expressly accepting
 * such terms or by downloading, installing, activating and/or otherwise using
 * the software, you are agreeing that you have read, and that you agree to
 * comply with and are bound by, such license terms.  If you do not agree to
 * be bound by the applicable license terms, then you may not retain, install,
 * activate or otherwise use the software.
 */

/**
 * @defgroup MODS_NSS_BATIMP batimp: Battery impedance check module
 * @ingroup MODS_NSS
 * The Battery impedance check module provides a single API call to check the battery impedance by checking the voltage
 * drop under different loads.
 *
 * @par Operating principle
 *  This module gradually activates extra current consumption in the NHS chip and observes if and when the VBAT voltage
 *  drops below 1.8V using the BOD HW block (see @ref pmu_brown_out_detector_par). @n
 *  The amount of extra current needed for VBAT to drop to 1.8V is inversely proportional to the battery impedance.
 *
 *  The extra current consumption is generated by sequentially activating the current dac of 1 or more of the
 *  PIO3, PIO7, PIO10 and PIO11 pins - the 4 high-source pads which have analog high current drive capabilities. See the
 *  @ref iocon_currentdrive_anchor IOCON documentation.
 *
 * @par Restrictions
 *  - The pins where the current drive mode will be enabled must be unconnected or pulled low at the time of the battery
 *      impedance check, so that no external current is drawn. Only the quiescent current is used to put more load on
 *      the battery
 *  - It is impossible for the chip to provide an estimate of the battery impedance, or the remaining battery capacity.
 *      Instead, it can check whether the current impedance causes a voltage drop to below the BOD detection point,
 *      given different loads. It is then up to the higher layers to interpret this and correlate it with information
 *      received from your battery supplier.
 *
 * @par Diversity
 *  This module supports diversity settings. It is expected that each application that uses this module includes it and
 *  configures the diversity settings of the module according to its specific needs.
 *  Check @ref MODS_NSS_BATIMP_DFT for all diversity parameters.
 *
 * @par Example
 *  In its most effective form, all pins are free to be used by this module, and the battery impedance check can
 *  try out all possible combinations. A complete check will take a little over 35 milliseconds.
 *
 *  @code
 *      // Placed in app_sel.h
 *      #define BATIMP_WAIT_TIME 1
 *      #define BATIMP_USE_PIO3 1
 *      #define BATIMP_USE_PIO7 1
 *      #define BATIMP_USE_PIO10 1
 *      #define BATIMP_USE_PIO11 1
 *  @endcode
 *
 *  @code
 *      // Placed in main.c
 *      if (BatImp_Check() < 0) {
 *          // Battery can still handle a load of more than 3.3 mA
 *      }
 *  @endcode
 *
 *  @{
 */
#ifndef __BATIMP_H_
#define __BATIMP_H_

/* ------------------------------------------------------------------------- */

#include "chip.h"
#include "batimp_dft.h"

/**
 * Successively applies different settings to the analog current drive mode of the enabled high-source pads.
 * Each iteration increases the load on the battery. When a BOD is detected, the operation stops. The returnvalue then
 * reflects the load which triggered the BOD.
 * During the check the VBAT voltage comparator is disabled to prevent battery disconnection. The original
 * setting is restored at function exit.
 * @warning This call is run synchronously, and will take a long time to complete. The exact amount depend on the number
 *  of pins assigned to this module, the battery impedance and @c maxCurrent value given, and the BOD detection time as
 *  set by #BATIMP_WAIT_TIME.
 * @see BATIMP_WAIT_TIME
 * @return
 *  - If a negative number is returned, BOD was never triggered, indicating a low battery impedance.
 *  - Else, BOD was triggered. The value indicates the extra current that was drawn when BOD was triggered.
 * @warning This check has a (small) negative impact on the battery. And, this check potentially can cause a reset.
 */
int BatImp_Check(void);

#endif /** @} */
